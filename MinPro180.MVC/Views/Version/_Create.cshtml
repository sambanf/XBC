@model MinPro180.ViewModel.VersionViewModel

@using (Html.BeginForm("Create", "Version", FormMethod.Post, new { id = "create-form", name = "create-form" }))
{
    @Html.AntiForgeryToken()
    <div>
        <div class="panel panel-warning">
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.version, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.version, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.version, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <button type="button" id="btn-new-q" class="btn btn-warning btn-new" href="#qmod">
            <span class="glyphicon glyphicon-plus"> <b>QUESTION</b></span>
        </button>
        <div class="panel panel-warning">
            <div id="question-list">
                List Question disini

            </div>
            <div class="form-group">
                <div class="col-md-offset-8 col-md-4">
                    <div class=" btn-group btn-group-sm">
                        <input type="submit" value="Save" class="btn btn-warning btn-sm" />
                        <input type="button" value="Cancel" class="btn btn-default btn-sm" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </div>


    </div>



}

@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
        $(document).ready(function () {
            GetList();
        });

        function GetList(){
            $.ajax({
                url: '@Url.Action("Detail","Version")',
                type: 'get',
                data: { search: $("#txt").val()},
                success: function (result) {
                    $("#question-list").html(result);
                },
                error: function (err) {
                    $("#question-list").html(err);
                }
            });
        }

    $("#create-form").submit(function () {

        var qList = [];
        $(this).find("#question-list").find("tr").each(function () {
            var list = { id: $(this).find("input[name=id]").val(), question: $(this).find("input[name=question]").val() }
            qList.push(list);
        });
        var data = { version: $(this).find("#version").val(), questions: qList };
        //alert(JSON.stringify(data));

        $.ajax({
            url: this.action,
            type: this.method,
            data: { model: data},
            success: function (result) {
                if (result.success) {
                    //alert($document.getElementsByClassName('form-control'))

                    alert("Save Version Successful");
                    $("#mver").modal("hide");
                    location.reload();
                } else {
                    alert("Error!." + result.message)
                }
            }
        });
        return false;
    });

    $('#btn-new-q').click(function () {
            $.ajax({
                url: '@Url.Action("Question","Version")',
                type: 'get',
                success: function (result) {
                    $("#qmodtitle").html("Create new Question")
                    $("#qmodbody").html(result);
                    $("#qmod").modal("show")

                },
                error: function (err) {
                    alert(err);
                }
            });
        });
    $('#bmodque').click(function (e) {
        $("#qmod").modal("hide")
    });

</script>
